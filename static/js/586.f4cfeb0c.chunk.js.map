{"version":3,"file":"static/js/586.f4cfeb0c.chunk.js","mappings":"kOAAaA,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAEnBC,EAAe,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EAIpBC,EAAY,SAAAL,GAAK,OAAIA,EAAMM,MAAV,E,uCCHjBC,GAAOC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,uLAYJE,EAAYF,EAAAA,GAAAA,MAAH,gEAKTG,GAAeH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,wC,wCCTnBK,EAASC,EAAAA,KAAaC,MAAM,CAC/BC,KAAMF,EAAAA,KACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACfC,OAAQN,EAAAA,KAAaO,SAAS,WAAWF,SAAS,cAIrCG,EAAc,WAC3B,IAAMC,GAAWC,EAAAA,EAAAA,MACXvB,GAAWwB,EAAAA,EAAAA,IAAY1B,GAezB,OACA,SAAC,KAAD,CACI2B,cAAe,CAAEV,KAAM,GAAII,OAAQ,IACnCO,iBAAkBd,EACde,SAjBkB,SAACC,EAAQC,GAC/B,IAAMC,EAAiBF,EAAOb,KAAKgB,cAGnC,GAFiB/B,EAASgC,MAAK,qBAAEjB,KAAegB,gBAAkBD,CAAnC,IAG3B,OAAOG,EAAAA,GAAAA,KAAA,UAAcL,EAAOb,KAArB,0BAAmD,CACtDmB,SAAUD,EAAAA,GAAAA,SAAAA,aAGfX,GAASa,EAAAA,EAAAA,IAAWP,IACpBC,EAAQO,WACZ,EAGH,UAII,UAAC9B,EAAD,YACI,UAACG,EAAD,CAAW4B,QAAQ,OAAnB,kBAEA,SAAC,KAAD,CACVC,KAAK,OACLvB,KAAK,OACLwB,QAAQ,yHACRC,MAAM,yIACNtB,UAAQ,KACM,SAACR,EAAD,CAAcK,KAAK,OAAO0B,UAAU,aAGpC,UAAChC,EAAD,CAAW4B,QAAQ,SAAnB,oBACI,SAAC,KAAD,CAAOC,KAAK,MAC9BvB,KAAK,SACLwB,QAAQ,yFACRC,MAAM,+FACNtB,UAAQ,KACU,SAACR,EAAD,CAAcK,KAAK,SAAS0B,UAAU,aAE1C,SAACC,EAAA,EAAD,CAAQC,QAAQ,WACnBL,KAAK,SADF,6BAKf,E,uCC5DcM,EAAS,WACvB,IAAMtB,GAAWC,EAAAA,EAAAA,MACXlB,GAASmB,EAAAA,EAAAA,IAAYpB,GAOxB,OACO,UAACyC,EAAA,EAAD,CACLJ,UAAU,OACVK,GAAI,CACFC,MAAO,QACNC,QAAS,EACZC,YAAU,EACVC,aAAa,MANR,WAQC,SAACC,EAAA,EAAD,CAAYR,QAAQ,KAApB,qCACA,SAACS,EAAA,EAAD,CACAC,MAAM,OACNV,QAAQ,WACRW,KAAK,QACLR,GAAI,CACFS,GAAG,QACHjB,KAAK,OACPvB,KAAK,SAASyC,MAAOnD,EACrBoD,SAvBU,SAAAC,GACtBpC,GAASqC,EAAAA,EAAAA,GAAeD,EAAIE,OAAOJ,OAEhC,MAyBF,E,UCrCYK,EAAatD,EAAAA,GAAAA,GAAH,uJASVuD,EAAavD,EAAAA,GAAAA,EAAH,2CCLVwD,EAAe,SAAC,GAAuC,IAAD,IAApCC,QAAWC,EAAyB,EAAzBA,GAAIlD,EAAqB,EAArBA,KAAMI,EAAe,EAAfA,OAC5CG,GAAWC,EAAAA,EAAAA,MAEjB,OACE,UAACsC,EAAD,YACE,UAACC,EAAD,eAAc/C,EAAd,QADF,KACqC,uBAAII,KACvC,SAACuB,EAAA,EAAD,CAAQC,QAAQ,WAAWW,KAAK,QAAQY,WAAW,SAACC,EAAA,EAAD,IACnD7B,KAAK,SAAS8B,QAAS,kBAAM9C,GAAS+C,EAAAA,EAAAA,IAAcJ,GAA7B,EADvB,sBAML,ECfYK,EAAO/D,EAAAA,GAAAA,GAAH,gI,UCGJgE,EAAc,WAExB,IAAMP,GAAUxC,EAAAA,EAAAA,IAAY1B,GACtBO,GAASmB,EAAAA,EAAAA,IAAYpB,GASpBoE,EAPc,WAChB,IAAMC,EAAmBpE,EAAO0B,cAChC,OAAOiC,EAAQ3D,QAAO,qBAAGU,KAClBgB,cAAc2C,SAASD,EADR,GAGrB,CAEsBE,GAE3B,OACI,SAACC,EAAA,EAAD,CAAK9B,GAAI,CAAEC,MAAO,IAAK8B,OAAQ,kBAAmBC,GAAG,GAArD,UACI,SAACR,EAAD,UACKE,EAAmBO,KAAI,SAAAf,GAAO,OAC9B,SAACD,EAAD,CAAgCC,QAASA,GAArBA,EAAQC,GADE,OAM9C,E,UCKD,EAxBe,WAEf,IAAM9D,GAAYqB,EAAAA,EAAAA,IAAYtB,GAExBoB,GAAWC,EAAAA,EAAAA,MAMjB,OAJAyD,EAAAA,EAAAA,YAAU,WACN1D,GAAS2D,EAAAA,EAAAA,MACV,GAAE,CAAC3D,KAGN,4BACI,iFACA,sCACA,SAACD,EAAD,IACClB,IAAa,SAAC+E,EAAA,EAAD,KACR,iCACE,SAACtC,EAAD,KACA,SAAC2B,EAAD,SAIX,C","sources":["redux/Contacts/selectors.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactsItem/ContactsItem.styled.jsx","components/ContactsItem/ContactsItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","RegisterView/Contacts.jsx"],"sourcesContent":["export const getContacts = state => state.contacts.items;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getFilter = state => state.filter;","import styled from 'styled-components';\nimport { Form as FormikForm, ErrorMessage as FormikError } from 'formik';\n\nexport const Form = styled(FormikForm)`\ndisplay:flex;\njustify-content: center;\nflex-direction: column;\ngap: 20px;\nwidth: 400px;\npadding: 20px;\nborder: 1px solid darkblue;\nborder-radius: 8px;\n`;\n\n\nexport const FormField = styled.label`\ndisplay:flex;\nflex-direction: column;\n`;\n\nexport const ErrorMessage = styled(FormikError)`\ncolor: tomato;\n`;","import { Formik, Field, } from 'formik';\nimport * as Yup from 'yup';\nimport {FormField, Form,ErrorMessage} from './ContactForm.styled';\nimport { addContact } from 'redux/Contacts/Operations';\nimport { useDispatch,useSelector } from 'react-redux';\nimport { getContacts } from 'redux/Contacts/selectors';\n\nimport { toast } from 'react-toastify';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport {  Button }from '@mui/material';\n\nconst schema = Yup.object().shape({\n   name: Yup.string()\n     .min(2, 'Too Short!')\n     .max(20, 'Too Long!')\n     .required('Required'),\nnumber: Yup.number().positive('!!! > 0').required('Required'),\n });\n\n\nexport const ContactForm = () => {\nconst dispatch = useDispatch();\nconst contacts = useSelector(getContacts);\n\n    const handleSaveContact = (values, actions) => {\n        const normalizedName = values.name.toLowerCase();\n        const findName = contacts.find(({name}) => name.toLowerCase() === normalizedName);\n\n        if (findName) {\n            return toast.info(`${values.name} is already in contact`, {\n                position: toast.POSITION.TOP_CENTER\n              });\n           }\n           dispatch(addContact(values));\n           actions.resetForm();\n      }\n     \n    return (\n    <Formik\n        initialValues={{ name: \"\", number: \"\" }}\n        validationSchema={schema}\n            onSubmit={handleSaveContact}>\n        <Form>\n            <FormField htmlFor=\"name\">\n                Name\n            <Field\n  type=\"text\"\n  name=\"name\"\n  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n  title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n  required/>\n                <ErrorMessage name=\"name\" component=\"span\"/>\n                </FormField>\n\n                <FormField htmlFor=\"number\">Number\n                    <Field type=\"tel\"\n  name=\"number\"\n  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n  title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n  required />\n                    <ErrorMessage name=\"number\" component=\"span\" />\n                </FormField>\n                <Button variant=\"outlined\" \n             type='submit'>Add contact</Button> \n        </Form>\n        </Formik>\n    )\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport {setFilterValue} from \"redux/Contacts/FilterSlice\";\nimport { getFilter } from \"redux/Contacts/selectors\";\n\nimport { Stack, TextField, Typography } from \"@mui/material\";\n\n\n  export const Filter = () => {\n const dispatch = useDispatch();\n const filter = useSelector(getFilter);\n\nconst  changeFilter = evt => {\ndispatch(setFilterValue(evt.target.value ));\n\n  };\n\n    return (\n           <Stack\n      component=\"form\"\n      sx={{\n        width: '25ch',\n      }} spacing={2}\n      noValidate\n      autoComplete=\"off\"> \n\n            <Typography variant=\"h6\">Find contacts by name </Typography> \n            <TextField\n            label=\"Find\"\n            variant=\"outlined\" \n            size=\"small\"\n            sx={{\n              mr:'2rem'\n            }}type=\"text\" \n            name=\"filter\" value={filter} \n            onChange={changeFilter}\n            ></TextField>\n          </Stack>\n       \n    )\n};","import styled from 'styled-components';\n\nexport const StyledItem = styled.li`\ndisplay: flex;\njustify-content: space-between;\ngap: 20px;\nborder: 1px solid blue;\nborder-radius: 8px;\npadding: 8px 16px;\n`;\n\nexport const StyledName = styled.p`\nfont-weight: 500;\n`;","import { useDispatch } from \"react-redux\";\nimport { deleteContact } from 'redux/Contacts/Operations'\nimport Button from '@mui/material/Button';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport {StyledItem, StyledName} from \"./ContactsItem.styled\";\n\nexport const ContactsItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <StyledItem>\n      <StyledName> {name}: </StyledName> <p>{number}</p>\n      <Button variant=\"outlined\" size=\"small\" startIcon={<DeleteIcon /> }\n      type=\"button\" onClick={() => dispatch(deleteContact(id)) }>\n        Delete\n      </Button>\n</StyledItem>\n  );\n};\n","import styled from 'styled-components';\n\n\nexport const List = styled.ul`\nwidth: 400px;\ndisplay: flex;\nflex-direction: column;\nlist-style: none;\npadding:0;\nmargin: 40px;\n\n`;\n\n\n\n","import { useSelector } from \"react-redux\";\nimport { ContactsItem } from \"components/ContactsItem/ContactsItem\"; \nimport { getContacts, getFilter} from 'redux/Contacts/selectors';\nimport { List} from \"./ContactList.styled\";\nimport Box from '@mui/material/Box';\n\nexport const ContactList = () => {\n  \n   const contact = useSelector(getContacts);\n   const filter = useSelector(getFilter);\n\n    const findContact = () => {\n        const normalizedFilter = filter.toLowerCase();\n        return contact.filter(({ name }) =>\n          name.toLowerCase().includes(normalizedFilter)\n        );\n        }\n     \n    const findFilterContacts = findContact();\n\n    return (\n        <Box sx={{ width: 600, border: '1px dashed blue', mt:4 }}>\n            <List>\n                {findFilterContacts.map(contact => \n                (<ContactsItem key ={contact.id} contact={contact}/>)\n                     )}  \n            </List>\n        </Box>\n    )\n}","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {fetchContacts} from \"redux/Contacts/Operations\";\nimport { getIsLoading} from \"redux/Contacts/selectors\";\n\nimport { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { Loader } from \"components/Loader/Loader\";\n\nconst Contacts=()=> {\n\nconst isLoading = useSelector(getIsLoading);\n\nconst dispatch = useDispatch();\n\nuseEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\nreturn(\n<div>\n    <h2>Please, enter a name and phonenumber to add contact</h2>\n    <h2>Contacts</h2>\n    <ContactForm/>\n    {isLoading && <Loader />}\n          <>\n            <Filter />\n            <ContactList />\n          </>\n</div>\n)\n};\n\nexport default Contacts;"],"names":["getContacts","state","contacts","items","getIsLoading","isLoading","getFilter","filter","Form","styled","FormikForm","FormField","ErrorMessage","FormikError","schema","Yup","shape","name","min","max","required","number","positive","ContactForm","dispatch","useDispatch","useSelector","initialValues","validationSchema","onSubmit","values","actions","normalizedName","toLowerCase","find","toast","position","addContact","resetForm","htmlFor","type","pattern","title","component","Button","variant","Filter","Stack","sx","width","spacing","noValidate","autoComplete","Typography","TextField","label","size","mr","value","onChange","evt","setFilterValue","target","StyledItem","StyledName","ContactsItem","contact","id","startIcon","Delete","onClick","deleteContact","List","ContactList","findFilterContacts","normalizedFilter","includes","findContact","Box","border","mt","map","useEffect","fetchContacts","Loader"],"sourceRoot":""}